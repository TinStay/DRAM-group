[{"D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\index.js":"1","D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\Navbar\\Navbar.js":"2","D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\App.js":"3","D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\Context\\AuthContext.js":"4","D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\firebase.js":"5","D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\AuthForms\\Signup.js":"6","D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\AuthForms\\Login.js":"7","D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\User\\Profile.js":"8","D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\User\\PrivateRoute.js":"9","D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\AuthForms\\ForgotPassword.js":"10","D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\axios.js":"11","D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\User\\UpdateProfile.js":"12"},{"size":220,"mtime":1608239004189,"results":"13","hashOfConfig":"14"},{"size":2717,"mtime":1608543327470,"results":"15","hashOfConfig":"14"},{"size":1208,"mtime":1608560020624,"results":"16","hashOfConfig":"14"},{"size":1853,"mtime":1608373511977,"results":"17","hashOfConfig":"14"},{"size":780,"mtime":1608646294533,"results":"18","hashOfConfig":"14"},{"size":4146,"mtime":1608561343634,"results":"19","hashOfConfig":"14"},{"size":2315,"mtime":1608383594827,"results":"20","hashOfConfig":"14"},{"size":3973,"mtime":1608916386845,"results":"21","hashOfConfig":"14"},{"size":473,"mtime":1608289055036,"results":"22","hashOfConfig":"14"},{"size":2182,"mtime":1608383692193,"results":"23","hashOfConfig":"14"},{"size":173,"mtime":1608482558732,"results":"24","hashOfConfig":"14"},{"size":12196,"mtime":1608916153750,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"2eaqnv",{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"28"},"D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\index.js",[],["54","55"],"D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\Navbar\\Navbar.js",["56","57","58","59"],"import React, { useEffect, useState } from \"react\";\r\n\r\n//React Router\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Style\r\nimport {\r\n  Navbar,\r\n  NavDropdown,\r\n  FormControl,\r\n  Nav,\r\n  Form,\r\n  Button,\r\n} from \"react-bootstrap\";\r\nimport classes from \"./Navbar.module.scss\";\r\nimport account_icon from \"../../assets/account/account_icon_purple.png\";\r\n\r\n// Auth\r\nimport { useAuth } from \"../../Context/AuthContext\";\r\n\r\nconst Navigationbar = () => {\r\n  const { currentUser, logout } = useAuth();\r\n  const [expanded, setExpanded] = useState(false);\r\n\r\n  let togglerClasses = [];\r\n  let collapseClasses = [];\r\n\r\n  let navItems = (\r\n    <Nav className=\"ml-auto\">\r\n      <Link\r\n        onClick={() => setExpanded(false)}\r\n        className={classes.btn_login}\r\n        to=\"/login\"\r\n      >\r\n        Login\r\n      </Link>\r\n      <Link\r\n        onClick={() => setExpanded(false)}\r\n        className={classes.btn_signup}\r\n        to=\"/signup\"\r\n      >\r\n        Sign up\r\n      </Link>\r\n    </Nav>\r\n  );\r\n\r\n  if (currentUser) {\r\n    navItems = (\r\n      <Nav className=\"ml-auto \">\r\n        <Link\r\n            onClick={() => setExpanded(false)}\r\n            className=\"nav-link\"\r\n            to=\"/\"\r\n          >\r\n            Discuss\r\n          </Link>\r\n        <NavDropdown\r\n          title={\r\n            <div className=\"d-inline \">\r\n              <img\r\n                className={classes.account_icon}\r\n                src={account_icon}\r\n                alt=\"account icon\"\r\n              />\r\n              <span className=\"mr-1\">{currentUser.email}</span>\r\n            </div>\r\n          }\r\n          id=\"basic-nav-dropdown\"\r\n        >\r\n          <Link\r\n            onClick={() => setExpanded(false)}\r\n            className=\"dropdown-item\"\r\n            to=\"/profile\"\r\n          >\r\n            Profile\r\n          </Link>\r\n          <Link\r\n            onClick={() => setExpanded(false)}\r\n            className=\"dropdown-item\"\r\n            to=\"/\"\r\n          >\r\n            Help\r\n          </Link>\r\n          <NavDropdown.Divider />\r\n          <NavDropdown.Item onClick={() => logout()}>Log out</NavDropdown.Item>\r\n        </NavDropdown>\r\n      </Nav>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Navbar expanded={expanded} className=\"\" bg=\"light\" expand=\"lg\">\r\n      <Link className={classes.logo} to=\"/\">\r\n        WeFontys\r\n      </Link>\r\n      <Navbar.Toggle\r\n        onClick={() => setExpanded(expanded ? false : \"expanded\")}\r\n        className={togglerClasses.join(\" \")}\r\n        aria-controls=\"basic-navbar-nav\"\r\n      />\r\n      <Navbar.Collapse\r\n        className={collapseClasses.join(\" \")}\r\n        id=\"basic-navbar-nav\"\r\n      >\r\n        {navItems}\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default Navigationbar;\r\n","D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\App.js",[],"D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\Context\\AuthContext.js",[],"D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\firebase.js",[],"D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\AuthForms\\Signup.js",["60","61","62"],"import React, { useRef, useState, useEffect } from \"react\";\r\nimport { db } from \"../../firebase\";\r\nimport axios from \"../../axios\";\r\n// Style\r\nimport { Card, Button, Form, Alert } from \"react-bootstrap\";\r\nimport classes from \"./AuthForms.module.scss\";\r\n\r\n// Auth\r\nimport { useAuth } from \"../../Context/AuthContext\";\r\n\r\n// React Router\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\nconst Signup = () => {\r\n  // State\r\n  const [error, setError] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // React router history\r\n  const history = useHistory();\r\n\r\n  // Form fields references\r\n  const emailRef = useRef();\r\n  const lastNameRef = useRef();\r\n  const firstNameRef = useRef();\r\n  const usernameRef = useRef();\r\n  const passwordRef = useRef();\r\n  const passwordConfirmRef = useRef();\r\n\r\n  // Signup function from context\r\n  const { signup, currentUser } = useAuth();\r\n\r\n  async function handleSubmit(e) {\r\n    // Prevent page from refreshing\r\n    e.preventDefault();\r\n\r\n    // Validate form\r\n    if (passwordRef.current.value !== passwordConfirmRef.current.value) {\r\n      // Set an error and exit out of function\r\n      return setError(\"Passwords do not match\");\r\n    }\r\n\r\n    try {\r\n      // Reset error message if it exists before signing up\r\n      setError(\"\");\r\n      setIsLoading(true);\r\n\r\n      await signup(emailRef.current.value, passwordRef.current.value).then(\r\n        (registeredUser) => {\r\n          // console.log(\"user\",registeredUser)\r\n\r\n          const userData = {\r\n            userID: registeredUser.user.uid,\r\n            firstName: firstNameRef.current.value,\r\n            lastName: lastNameRef.current.value,\r\n            username: usernameRef.current.value,\r\n            email: emailRef.current.value,\r\n            studyProgram: \"\",\r\n            city: \"\",\r\n            nationality: \"\",\r\n            interests: \"\",\r\n            photoURL: \"\",\r\n          };\r\n\r\n          // Create an user entry in Firebase Realtime Database\r\n          db.ref(`/users/${registeredUser.user.uid}`).set(userData);\r\n        }\r\n      );\r\n\r\n      // Redirect to home page\r\n      history.push(\"/\");\r\n\r\n    } catch (error) {\r\n      console.log(\"Auth error: \", error);\r\n      setError(\"Failed to sign up\");\r\n    }\r\n\r\n    setIsLoading(false);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.form_container}>\r\n      <Card>\r\n        <Card.Body>\r\n          <h2 className=\"text-center mb-4\">Sign Up</h2>\r\n\r\n          {error && <Alert variant=\"danger\">{error}</Alert>}\r\n\r\n          <Form onSubmit={(e) => handleSubmit(e)}>\r\n            <Form.Group id=\"email\">\r\n              <Form.Label>Email</Form.Label>\r\n              <Form.Control type=\"email\" ref={emailRef} required />\r\n            </Form.Group>\r\n\r\n            <Form.Group id=\"firstName\">\r\n              <Form.Label>First name</Form.Label>\r\n              <Form.Control type=\"text\" ref={firstNameRef} required />\r\n            </Form.Group>\r\n\r\n            <Form.Group id=\"lastName\">\r\n              <Form.Label>Last name</Form.Label>\r\n              <Form.Control type=\"text\" ref={lastNameRef} required />\r\n            </Form.Group>\r\n\r\n            <Form.Group id=\"username\">\r\n              <Form.Label>Username</Form.Label>\r\n              <Form.Control type=\"text\" ref={usernameRef} required />\r\n            </Form.Group>\r\n\r\n\r\n            <Form.Group id=\"password\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control type=\"password\" ref={passwordRef} required />\r\n            </Form.Group>\r\n\r\n            <Form.Group id=\"password-confirm\">\r\n              <Form.Label>Confirm password</Form.Label>\r\n              <Form.Control type=\"password\" ref={passwordConfirmRef} required />\r\n            </Form.Group>\r\n\r\n            <Button\r\n              disabled={isLoading}\r\n              className=\"w-100 btn-purple-rounded\"\r\n              type=\"submit\"\r\n            >\r\n              Sign Up\r\n            </Button>\r\n          </Form>\r\n        </Card.Body>\r\n      </Card>\r\n      <div className=\"w-100 text-center mt-2\">\r\n        Already have an account? <Link to=\"/login\">Log In</Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\AuthForms\\Login.js",[],"D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\User\\Profile.js",["63","64"],"D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\User\\PrivateRoute.js",[],"D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\AuthForms\\ForgotPassword.js",[],"D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\axios.js",[],"D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\User\\UpdateProfile.js",["65","66","67","68","69"],"import React, { useRef, useState, useEffect } from \"react\";\r\nimport axios from \"../../axios\";\r\nimport account_image from \"../../assets/account/account_icon_purple.png\";\r\nimport { storage } from \"../../firebase\";\r\n\r\n// Style\r\nimport {\r\n  Card,\r\n  Button,\r\n  Form,\r\n  Alert,\r\n  InputGroup,\r\n  FormControl,\r\n} from \"react-bootstrap\";\r\nimport classes from \"./Profile.module.scss\";\r\n\r\n// Auth\r\nimport { useAuth } from \"../../Context/AuthContext\";\r\n\r\n// React Router\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\nconst UpdateProfile = () => {\r\n  // State\r\n  const [userData, setUserData] = useState();\r\n  const [profileImageFile, setProfileImageFile] = useState();\r\n  const [profileImageURL, setProfileImageURL] = useState(\"\");\r\n  const [profileImagePreview, setProfileImagePreview] = useState();\r\n  const [error, setError] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // React router history\r\n  const history = useHistory();\r\n\r\n  // Form fields references\r\n  const usernameRef = useRef();\r\n  // const emailRef = useRef();\r\n  const nationalityRef = useRef();\r\n  const cityRef = useRef();\r\n  const studyProgramRef = useRef();\r\n  const interestRef = useRef();\r\n  const passwordRef = useRef();\r\n  const passwordConfirmRef = useRef();\r\n\r\n  // Signup function from context\r\n  const { currentUser, updateEmail, updatePassword } = useAuth();\r\n\r\n  // Request user data from Firebase Realtime Database\r\n  useEffect(() => {\r\n    axios\r\n      .get(`/users/${currentUser.uid}.json`)\r\n      .then((userData) => {\r\n        // Set user data state\r\n        setUserData(userData.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"err\", err);\r\n      });\r\n  }, []);\r\n\r\n  const addInterest = (e) => {\r\n    const newInterest = interestRef.current.value;\r\n    // Copy array from firebase or create an empty one if there isnt one in firebase\r\n    let newInterestsArray =\r\n      userData.interests !== \"\" ? [...userData.interests] : [];\r\n\r\n    if (newInterest !== \"\") {\r\n      if (!newInterestsArray.includes(newInterest)) {\r\n        let newUserData = { ...userData };\r\n\r\n        // Add interest to all interests\r\n        newInterestsArray.push(newInterest);\r\n\r\n        // Update interests in userData\r\n        newUserData.interests = newInterestsArray;\r\n\r\n        // Update state with new interests\r\n        setUserData(newUserData);\r\n\r\n        // Reset form\r\n        interestRef.current.value = \"\";\r\n      } else {\r\n        setError(\"Interest already exists in your interest list\");\r\n        console.log(\"Interest already exists in your interest list\");\r\n      }\r\n    } else {\r\n      setError(\"Interest must be at least 2 letters\");\r\n      console.log(\"Interest must be at least 2 letters\");\r\n    }\r\n  };\r\n\r\n  const removeInterest = (e, index) => {\r\n    let newUserData = { ...userData };\r\n\r\n    // Remove interest from array\r\n    newUserData.interests.splice(index, 1);\r\n\r\n    // Change interest array to string so Firebase doesn't remove field from Realtime Database\r\n    // When a field is null or [] Firebase removes it\r\n    if (newUserData.interests.length === 0) {\r\n      newUserData.interests = \"\";\r\n    }\r\n\r\n    // Update user data\r\n    setUserData(newUserData);\r\n  };\r\n\r\n  // Profile image file\r\n  let fileInput = null;\r\n\r\n  const uploadNewImage = (event) => {\r\n    // Save image file as a URL in order to preview the image\r\n    const imagePreviewURL = URL.createObjectURL(event.target.files[0]);\r\n\r\n    // Update state with preview image file URL\r\n    setProfileImagePreview(imagePreviewURL);\r\n\r\n    // Update profile image file state\r\n    setProfileImageFile(event.target.files[0]);\r\n  };\r\n\r\n\r\n  async function handleSubmit(e) {\r\n    // Prevent page from refreshing\r\n    e.preventDefault();\r\n\r\n    \r\n\r\n    // New form values\r\n    const newUsername = usernameRef.current.value;\r\n    const newNationality = nationalityRef.current.value;\r\n    const newCity = cityRef.current.value;\r\n    const newStudyProgram = studyProgramRef.current.value;\r\n\r\n    // Validate form\r\n    if (passwordRef.current.value !== passwordConfirmRef.current.value) {\r\n      // Set an error and exit out of function\r\n      return setError(\"Passwords do not match\");\r\n    }\r\n\r\n    // Reset error message if it exists before signing up\r\n    setError(\"\");\r\n    setIsLoading(true);\r\n\r\n    // Promises list that will be executed\r\n    const promises = [];\r\n\r\n    // await handleFirebaseImageUpload();\r\n    if (profileImageFile) {\r\n      // Handle profile image file upload to Firebase Storage\r\n      const uploadTask = storage\r\n        .ref(\r\n          `users/${currentUser.email}/profile-image/${profileImageFile.name}`\r\n        )\r\n        .put(profileImageFile);\r\n\r\n        // Push upload of image to promises list\r\n      // promises.push(uploadTask)\r\n\r\n      uploadTask.on(\r\n        \"state_changed\",\r\n        (snapshot) => {\r\n          console.log(\"Uploading image...\");\r\n        },\r\n        (error) => {\r\n          // Error function ...\r\n          console.log(\"Uploading image error: \", error);\r\n        },\r\n        async function () {\r\n          // Complete function ...\r\n          await storage\r\n            .ref(`users/${currentUser.email}`)\r\n            .child(`/profile-image/${profileImageFile.name}`)\r\n            .getDownloadURL()\r\n            .then((url) => {\r\n              // Set new data with image URL which is going to be uploaded to Firebase Reatime Database\r\n              let newUserProfileData = {...userData}\r\n              newUserProfileData.photoURL = url\r\n\r\n              promises.push(axios.put(`users/${currentUser.uid}.json`, newUserProfileData))\r\n\r\n            });\r\n\r\n          console.log(\"Uploaded image\");\r\n        }\r\n      );\r\n    }\r\n\r\n    \r\n    // Duplicate userData\r\n    let newUserData = { ...userData };\r\n\r\n    // Add new values to object\r\n    newUserData.username = newUsername;\r\n    newUserData.nationality = newNationality;\r\n    newUserData.city = newCity;\r\n    newUserData.studyProgram = newStudyProgram;\r\n    // newUserData.photoURL = profileImageURL;\r\n    // Don't need to add interests because they are added and\r\n    // removed to userData on form change\r\n    \r\n    \r\n\r\n    // Update email\r\n    // if (emailRef.current.value !== currentUser.email) {\r\n    //   promises.push(updateEmail(emailRef.current.value));\r\n    // }\r\n\r\n    if (passwordRef.current.value) {\r\n      promises.push(updatePassword(passwordRef.current.value));\r\n    }\r\n\r\n    // Update other user data\r\n    promises.push(axios.put(`users/${currentUser.uid}.json`, newUserData));\r\n\r\n    if (promises.length > 0) {\r\n      Promise.all(promises)\r\n        .then(() => {\r\n          // Redirect to home page if all promises are successful\r\n          history.push(\"/profile\");\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Update profile error: \", error);\r\n          setError(\"Failed to update profile\");\r\n        })\r\n        .finally(() => {\r\n          setIsLoading(false);\r\n        });\r\n    } else {\r\n      setError(\"No changes we detected\");\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  // console.log(\"profile image\",profileImagePreview)\r\n\r\n  let accountImageClasses = [\"rounded-circle\", classes.account_image_main];\r\n\r\n  return (\r\n    <div className={classes.form_container}>\r\n      <Card>\r\n        <Card.Body>\r\n          <h2 className=\"text-center mb-4\">Update profile</h2>\r\n\r\n          {error && <Alert variant=\"danger\">{error}</Alert>}\r\n          <div className=\"my-3 text-center\">\r\n            <img\r\n              className={accountImageClasses.join(\" \")}\r\n              src={profileImagePreview ? profileImagePreview : userData ? userData.photoURL : account_image}\r\n              alt=\"account image\"\r\n            ></img>\r\n            <input\r\n              name=\"image\"\r\n              style={{ display: \"none\" }}\r\n              type=\"file\"\r\n              onChange={uploadNewImage}\r\n              ref={(input) => {\r\n                fileInput = input;\r\n              }}\r\n            />\r\n            <Button\r\n              onClick={() => fileInput.click()}\r\n              className=\"my-4\"\r\n              variant=\"primary\"\r\n            >\r\n              Select new image\r\n            </Button>\r\n          </div>\r\n          <p className=\"text-muted\">\r\n            Leave blank the fields which you don't want to change\r\n          </p>\r\n          <Form onSubmit={(e) => handleSubmit(e)}>\r\n            <Form.Group id=\"username\">\r\n              <Form.Label>Username</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                defaultValue={userData && userData.username}\r\n                ref={usernameRef}\r\n              />\r\n            </Form.Group>\r\n\r\n            {/* <Form.Group id=\"email\">\r\n              <Form.Label>Email</Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                defaultValue={currentUser.email}\r\n                ref={emailRef}\r\n                required\r\n              />\r\n            </Form.Group> */}\r\n\r\n            <Form.Group id=\"nationality\">\r\n              <Form.Label>Nationality</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                defaultValue={userData ? userData.nationality : \"\"}\r\n                ref={nationalityRef}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group id=\"city\">\r\n              <Form.Label>City</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                defaultValue={userData ? userData.city : \"\"}\r\n                ref={cityRef}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group id=\"studyProgram\">\r\n              <Form.Label>Study program</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                defaultValue={userData ? userData.studyProgram : \"\"}\r\n                ref={studyProgramRef}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group id=\"interests\">\r\n              <Form.Label>Interests</Form.Label>\r\n              <InputGroup className=\"mb-3\">\r\n                <FormControl\r\n                  placeholder=\"Add interest\"\r\n                  aria-label=\"interest\"\r\n                  aria-describedby=\"basic-addon2\"\r\n                  ref={interestRef}\r\n                />\r\n                <InputGroup.Append>\r\n                  <Button onClick={(e) => addInterest(e)} variant=\"primary\">\r\n                    Add\r\n                  </Button>\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n              <div className=\"w-100 mx-auto row text-center\">\r\n                {userData && userData.interests !== \"\"\r\n                  ? userData.interests.map((interest, index) => {\r\n                      return (\r\n                        <div\r\n                          key={interest}\r\n                          onClick={(e) => removeInterest(e, index)}\r\n                          className=\"interest-container col-4 px-1\"\r\n                        >\r\n                          <p className=\"interest-box\">{interest}</p>\r\n                        </div>\r\n                      );\r\n                    })\r\n                  : null}\r\n              </div>\r\n            </Form.Group>\r\n\r\n            {/* <Form.Group id=\"interests\">\r\n              <Form.Label>Interests</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n\r\n                // defaultValue={currentUser.email}\r\n              />\r\n              \r\n            </Form.Group> */}\r\n\r\n            <Form.Group id=\"password\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control type=\"password\" ref={passwordRef} />\r\n            </Form.Group>\r\n\r\n            <Form.Group id=\"password-confirm\">\r\n              <Form.Label>Confirm password</Form.Label>\r\n              <Form.Control type=\"password\" ref={passwordConfirmRef} />\r\n            </Form.Group>\r\n\r\n            <Button\r\n              disabled={isLoading}\r\n              className=\"btn-purple-rounded w-100 mb-3\"\r\n              type=\"submit\"\r\n            >\r\n              Update\r\n            </Button>\r\n\r\n            <Link to=\"/profile\" className=\"btn btn-danger w-100 \" type=\"submit\">\r\n              Cancel\r\n            </Link>\r\n          </Form>\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdateProfile;\r\n",{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":1,"column":17,"nodeType":"76","messageId":"77","endLine":1,"endColumn":26},{"ruleId":"74","severity":1,"message":"78","line":10,"column":3,"nodeType":"76","messageId":"77","endLine":10,"endColumn":14},{"ruleId":"74","severity":1,"message":"79","line":12,"column":3,"nodeType":"76","messageId":"77","endLine":12,"endColumn":7},{"ruleId":"74","severity":1,"message":"80","line":13,"column":3,"nodeType":"76","messageId":"77","endLine":13,"endColumn":9},{"ruleId":"74","severity":1,"message":"75","line":1,"column":35,"nodeType":"76","messageId":"77","endLine":1,"endColumn":44},{"ruleId":"74","severity":1,"message":"81","line":3,"column":8,"nodeType":"76","messageId":"77","endLine":3,"endColumn":13},{"ruleId":"74","severity":1,"message":"82","line":31,"column":19,"nodeType":"76","messageId":"77","endLine":31,"endColumn":30},{"ruleId":"74","severity":1,"message":"79","line":6,"column":16,"nodeType":"76","messageId":"77","endLine":6,"endColumn":20},{"ruleId":"83","severity":1,"message":"84","line":62,"column":15,"nodeType":"85","endLine":62,"endColumn":112},{"ruleId":"74","severity":1,"message":"86","line":27,"column":10,"nodeType":"76","messageId":"77","endLine":27,"endColumn":25},{"ruleId":"74","severity":1,"message":"87","line":27,"column":27,"nodeType":"76","messageId":"77","endLine":27,"endColumn":45},{"ruleId":"74","severity":1,"message":"88","line":46,"column":24,"nodeType":"76","messageId":"77","endLine":46,"endColumn":35},{"ruleId":"89","severity":1,"message":"90","line":59,"column":6,"nodeType":"91","endLine":59,"endColumn":8,"suggestions":"92"},{"ruleId":"93","severity":1,"message":"94","line":247,"column":13,"nodeType":"85","endLine":251,"endColumn":14},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'FormControl' is defined but never used.","'Form' is defined but never used.","'Button' is defined but never used.","'axios' is defined but never used.","'currentUser' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'profileImageURL' is assigned a value but never used.","'setProfileImageURL' is assigned a value but never used.","'updateEmail' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentUser.uid'. Either include it or remove the dependency array.","ArrayExpression",["97"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},"Update the dependencies array to be: [currentUser.uid]",{"range":"100","text":"101"},[1690,1692],"[currentUser.uid]"]