[{"D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\index.js":"1","D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\Navbar\\Navbar.js":"2","D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\App.js":"3","D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\Context\\AuthContext.js":"4","D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\firebase.js":"5","D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\AuthForms\\Signup.js":"6","D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\AuthForms\\Login.js":"7","D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\User\\Profile.js":"8","D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\User\\PrivateRoute.js":"9","D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\AuthForms\\ForgotPassword.js":"10","D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\axios.js":"11","D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\User\\UpdateProfile.js":"12","D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\shared\\sharedFunctions.js":"13","D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\Discussions\\Discussions.js":"14","D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\Discussions\\Categories.js":"15","D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\Discussions\\DiscussionBox.js":"16","D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\Discussions\\DiscussionForm.js":"17"},{"size":220,"mtime":1608239004189,"results":"18","hashOfConfig":"19"},{"size":3273,"mtime":1610036939993,"results":"20","hashOfConfig":"19"},{"size":1489,"mtime":1610028267775,"results":"21","hashOfConfig":"19"},{"size":1853,"mtime":1608373511977,"results":"22","hashOfConfig":"19"},{"size":780,"mtime":1608646294533,"results":"23","hashOfConfig":"19"},{"size":4146,"mtime":1608561343634,"results":"24","hashOfConfig":"19"},{"size":2315,"mtime":1608383594827,"results":"25","hashOfConfig":"19"},{"size":3973,"mtime":1609008744041,"results":"26","hashOfConfig":"19"},{"size":473,"mtime":1608289055036,"results":"27","hashOfConfig":"19"},{"size":2182,"mtime":1608383692193,"results":"28","hashOfConfig":"19"},{"size":173,"mtime":1608482558732,"results":"29","hashOfConfig":"19"},{"size":13770,"mtime":1609843121423,"results":"30","hashOfConfig":"19"},{"size":824,"mtime":1609010293349,"results":"31","hashOfConfig":"19"},{"size":2124,"mtime":1610038248137,"results":"32","hashOfConfig":"19"},{"size":1047,"mtime":1610038416999,"results":"33","hashOfConfig":"19"},{"size":1942,"mtime":1610037525978,"results":"34","hashOfConfig":"19"},{"size":3724,"mtime":1610039110993,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"2eaqnv",{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},"D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\index.js",[],["75","76"],"D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\Navbar\\Navbar.js",["77","78","79","80"],"D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\App.js",[],"D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\Context\\AuthContext.js",[],"D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\firebase.js",[],"D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\AuthForms\\Signup.js",["81","82","83"],"import React, { useRef, useState, useEffect } from \"react\";\r\nimport { db } from \"../../firebase\";\r\nimport axios from \"../../axios\";\r\n// Style\r\nimport { Card, Button, Form, Alert } from \"react-bootstrap\";\r\nimport classes from \"./AuthForms.module.scss\";\r\n\r\n// Auth\r\nimport { useAuth } from \"../../Context/AuthContext\";\r\n\r\n// React Router\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\nconst Signup = () => {\r\n  // State\r\n  const [error, setError] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // React router history\r\n  const history = useHistory();\r\n\r\n  // Form fields references\r\n  const emailRef = useRef();\r\n  const lastNameRef = useRef();\r\n  const firstNameRef = useRef();\r\n  const usernameRef = useRef();\r\n  const passwordRef = useRef();\r\n  const passwordConfirmRef = useRef();\r\n\r\n  // Signup function from context\r\n  const { signup, currentUser } = useAuth();\r\n\r\n  async function handleSubmit(e) {\r\n    // Prevent page from refreshing\r\n    e.preventDefault();\r\n\r\n    // Validate form\r\n    if (passwordRef.current.value !== passwordConfirmRef.current.value) {\r\n      // Set an error and exit out of function\r\n      return setError(\"Passwords do not match\");\r\n    }\r\n\r\n    try {\r\n      // Reset error message if it exists before signing up\r\n      setError(\"\");\r\n      setIsLoading(true);\r\n\r\n      await signup(emailRef.current.value, passwordRef.current.value).then(\r\n        (registeredUser) => {\r\n          // console.log(\"user\",registeredUser)\r\n\r\n          const userData = {\r\n            userID: registeredUser.user.uid,\r\n            firstName: firstNameRef.current.value,\r\n            lastName: lastNameRef.current.value,\r\n            username: usernameRef.current.value,\r\n            email: emailRef.current.value,\r\n            studyProgram: \"\",\r\n            city: \"\",\r\n            nationality: \"\",\r\n            interests: \"\",\r\n            photoURL: \"\",\r\n          };\r\n\r\n          // Create an user entry in Firebase Realtime Database\r\n          db.ref(`/users/${registeredUser.user.uid}`).set(userData);\r\n        }\r\n      );\r\n\r\n      // Redirect to home page\r\n      history.push(\"/\");\r\n\r\n    } catch (error) {\r\n      console.log(\"Auth error: \", error);\r\n      setError(\"Failed to sign up\");\r\n    }\r\n\r\n    setIsLoading(false);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.form_container}>\r\n      <Card>\r\n        <Card.Body>\r\n          <h2 className=\"text-center mb-4\">Sign Up</h2>\r\n\r\n          {error && <Alert variant=\"danger\">{error}</Alert>}\r\n\r\n          <Form onSubmit={(e) => handleSubmit(e)}>\r\n            <Form.Group id=\"email\">\r\n              <Form.Label>Email</Form.Label>\r\n              <Form.Control type=\"email\" ref={emailRef} required />\r\n            </Form.Group>\r\n\r\n            <Form.Group id=\"firstName\">\r\n              <Form.Label>First name</Form.Label>\r\n              <Form.Control type=\"text\" ref={firstNameRef} required />\r\n            </Form.Group>\r\n\r\n            <Form.Group id=\"lastName\">\r\n              <Form.Label>Last name</Form.Label>\r\n              <Form.Control type=\"text\" ref={lastNameRef} required />\r\n            </Form.Group>\r\n\r\n            <Form.Group id=\"username\">\r\n              <Form.Label>Username</Form.Label>\r\n              <Form.Control type=\"text\" ref={usernameRef} required />\r\n            </Form.Group>\r\n\r\n\r\n            <Form.Group id=\"password\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control type=\"password\" ref={passwordRef} required />\r\n            </Form.Group>\r\n\r\n            <Form.Group id=\"password-confirm\">\r\n              <Form.Label>Confirm password</Form.Label>\r\n              <Form.Control type=\"password\" ref={passwordConfirmRef} required />\r\n            </Form.Group>\r\n\r\n            <Button\r\n              disabled={isLoading}\r\n              className=\"w-100 btn-purple-rounded\"\r\n              type=\"submit\"\r\n            >\r\n              Sign Up\r\n            </Button>\r\n          </Form>\r\n        </Card.Body>\r\n      </Card>\r\n      <div className=\"w-100 text-center mt-2\">\r\n        Already have an account? <Link to=\"/login\">Log In</Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\AuthForms\\Login.js",[],"D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\User\\Profile.js",["84","85"],"import React, { useState, useEffect } from \"react\";\r\nimport { useAuth } from \"../../Context/AuthContext\";\r\nimport axios from \"../../axios\";\r\nimport account_icon from '../../assets/account/account_icon_purple.png';\r\n// Style\r\nimport { Card, Form, Button, Alert } from \"react-bootstrap\";\r\nimport classes from \"./Profile.module.scss\";\r\n\r\n// React Router\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\n\r\n\r\nconst Profile = () => {\r\n  //State\r\n  const [error, setError] = useState(\"\");\r\n  const { currentUser, logout } = useAuth();\r\n\r\n  const [userData, setUserData] = useState();\r\n\r\n  const history = useHistory();\r\n\r\n  // Update user data from Firebase Realtime Database\r\n  useEffect(() => {\r\n    axios\r\n      .get(`/users/${currentUser.uid}.json`)\r\n      .then((userData) => {\r\n        // Set user data state\r\n        setUserData(userData.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"err\", err);\r\n      });\r\n  });\r\n\r\n  async function handleLogout() {\r\n    // Clear existing error\r\n    setError(\"\");\r\n\r\n    try {\r\n      await logout();\r\n\r\n      // Redirect to home page\r\n      history.push(\"/\");\r\n    } catch (error) {\r\n      setError(error);\r\n    }\r\n  }\r\n\r\n  let accountImageClasses = [\"rounded-circle\", classes.account_image_main];\r\n\r\n  return (\r\n    <div className={classes.profile_container}>\r\n      <Card>\r\n        <Card.Body>\r\n          {/* <h2 className=\"text-center mb-4\">Profile</h2> */}\r\n\r\n          {error && <Alert variant=\"danger\">{error}</Alert>}\r\n\r\n          <div className=\"w-100\">\r\n            <div className=\"my-3 text-center\">\r\n              <img className={accountImageClasses.join(\" \")} src={userData ? userData.photoURL : account_icon}></img>\r\n            </div>\r\n            <div className=\"my-3\">\r\n              <strong>Email: </strong>\r\n              {userData && userData.email}\r\n            </div>\r\n            <div className=\"my-3\">\r\n              <strong>Name: </strong>\r\n              {userData && userData.firstName + \" \" + userData.lastName}\r\n            </div>\r\n            <div className=\"my-3\">\r\n              <strong>Userame: </strong>\r\n              {userData && userData.username}\r\n            </div>\r\n            <div className=\"my-3\">\r\n              <strong>Nationality: </strong>\r\n              {userData && userData.nationality}\r\n            </div>\r\n            <div className=\"my-3\">\r\n              <strong>City: </strong>\r\n              {userData && userData.city}\r\n            </div>\r\n            <div className=\"my-3\">\r\n              <strong>Study program: </strong>\r\n              {userData && userData.studyProgram}\r\n            </div>\r\n            <div className=\"my-3\">\r\n              <strong>Interests: </strong>\r\n              <div className=\"w-100 mx-auto my-3 row text-center\">\r\n                {(userData && userData.interests )\r\n                  ? userData.interests.map((interest) => (\r\n                      <div\r\n                        key={interest}\r\n                        className=\"interest-container col-4 px-1\"\r\n                      >\r\n                        <p key={interest} className={classes.interest_box}>\r\n                          {interest}\r\n                        </p>\r\n                      </div>\r\n                    ))\r\n                  : <p className=\"text-muted\">You haven't selected any interests yet.</p> }\r\n              </div>\r\n            </div>\r\n            <div className=\"d-flex justify-content-between mt-4\">\r\n              <Link\r\n                to=\"update-profile\"\r\n                className=\"btn-purple-rounded text-decoration-none white mr-5\"\r\n              >\r\n                Update profile \r\n              </Link>\r\n              <Button\r\n                variant=\"danger\"\r\n                onClick={handleLogout}\r\n                className=\"btn btn-danger\"\r\n              >\r\n                Logout\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\User\\PrivateRoute.js",[],"D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\AuthForms\\ForgotPassword.js",[],"D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\axios.js",[],"D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\User\\UpdateProfile.js",["86","87","88","89","90","91"],"import React, { useRef, useState, useEffect } from \"react\";\r\nimport axios from \"../../axios\";\r\nimport account_image from \"../../assets/account/account_icon_purple.png\";\r\nimport { objectsAreTheSame } from \"../../shared/sharedFunctions\";\r\nimport { storage } from \"../../firebase\";\r\n\r\n// Style\r\nimport {\r\n  Card,\r\n  Button,\r\n  Form,\r\n  Alert,\r\n  InputGroup,\r\n  FormControl,\r\n  Spinner,\r\n} from \"react-bootstrap\";\r\nimport classes from \"./Profile.module.scss\";\r\n\r\n// Auth\r\nimport { useAuth } from \"../../Context/AuthContext\";\r\n\r\n// React Router\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\nconst UpdateProfile = () => {\r\n  // State\r\n  const [userData, setUserData] = useState();\r\n  const [profileImageFile, setProfileImageFile] = useState();\r\n  const [profileImageURL, setProfileImageURL] = useState(\"\");\r\n  const [profileImagePreview, setProfileImagePreview] = useState();\r\n  const [interests, setInterests] = useState([]);\r\n  const [error, setError] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // React router history\r\n  const history = useHistory();\r\n\r\n  // Form fields references\r\n  const nameRef = useRef();\r\n  const usernameRef = useRef();\r\n  // const emailRef = useRef();\r\n  const nationalityRef = useRef();\r\n  const cityRef = useRef();\r\n  const studyProgramRef = useRef();\r\n  const interestRef = useRef();\r\n  const passwordRef = useRef();\r\n  const passwordConfirmRef = useRef();\r\n\r\n  // Signup function from context\r\n  const { currentUser, updateEmail, updatePassword } = useAuth();\r\n\r\n  // Request user data from Firebase Realtime Database\r\n  useEffect(() => {\r\n    axios\r\n      .get(`/users/${currentUser.uid}.json`)\r\n      .then((userData) => {\r\n        // Set user data state\r\n        setUserData(userData.data);\r\n\r\n        setInterests(userData.data.interests);\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"err\", err);\r\n      });\r\n  }, []);\r\n\r\n  const addInterest = (e) => {\r\n    const newInterest = interestRef.current.value;\r\n    // Copy array from firebase or create an empty one if there isnt one in firebase\r\n    let newInterestsArray = interests !== \"\" ? [...interests] : [];\r\n\r\n    if (newInterest.length > 1) {\r\n      if (!newInterestsArray.includes(newInterest)) {\r\n        // Add interest to all interests\r\n        newInterestsArray.push(newInterest);\r\n\r\n        // Update state with new interests\r\n        setInterests(newInterestsArray);\r\n\r\n        // Reset form\r\n        interestRef.current.value = \"\";\r\n      } else {\r\n        setError(\"Interest already exists in your interest list\");\r\n        console.log(\"Interest already exists in your interest list\");\r\n      }\r\n    } else {\r\n      setError(\"Interest must be at least 2 letters\");\r\n      console.log(\"Interest must be at least 2 letters\");\r\n    }\r\n  };\r\n\r\n  const removeInterest = (e, index) => {\r\n    let updatedInterests = [...interests];\r\n\r\n    // Remove interest from array\r\n    updatedInterests.splice(index, 1);\r\n\r\n    // Change interest array to string if there are no interests so Firebase doesn't remove field from Realtime Database\r\n    // When a field is null or [] Firebase removes it\r\n    if (updatedInterests.length === 0) {\r\n      updatedInterests = \"\";\r\n    }\r\n\r\n    // Update new interests state\r\n    setInterests(updatedInterests);\r\n  };\r\n\r\n  // Profile image file\r\n  let fileInput = null;\r\n\r\n  const uploadNewImage = (event) => {\r\n    // Save image file as a URL in order to preview the image\r\n    const imagePreviewURL = URL.createObjectURL(event.target.files[0]);\r\n\r\n    // Update state with preview image file URL\r\n    setProfileImagePreview(imagePreviewURL);\r\n\r\n    // Update profile image file state\r\n    setProfileImageFile(event.target.files[0]);\r\n  };\r\n\r\n  async function handleSubmit(e) {\r\n    // Prevent page from refreshing\r\n    e.preventDefault();\r\n\r\n    // Reset error message if it exists before signing up\r\n    setError(\"\");\r\n    setIsLoading(true);\r\n\r\n    // New form values\r\n    const newFirstName = nameRef.current.value.split(\" \")[0];\r\n    const newLastName = nameRef.current.value.split(\" \")[1];\r\n    const newUsername = usernameRef.current.value;\r\n    const newNationality = nationalityRef.current.value;\r\n    const newCity = cityRef.current.value;\r\n    const newStudyProgram = studyProgramRef.current.value;\r\n\r\n    // Validate form\r\n    if (passwordRef.current.value !== passwordConfirmRef.current.value) {\r\n      // Set an error and exit out of function\r\n      return setError(\"Passwords do not match\");\r\n    }\r\n\r\n    // Promises list that will be executed\r\n    const promises = [];\r\n\r\n    if (profileImageFile) {\r\n      // Update user data when new image has been uploaded to Firebase Storage\r\n      console.log(\"Update with image\");\r\n\r\n      // Handle profile image file upload to Firebase Storage\r\n      const uploadTask = storage\r\n        .ref(\r\n          `users/${currentUser.email}/profile-image/${profileImageFile.name}`\r\n        )\r\n        .put(profileImageFile);\r\n\r\n      // Push upload of image to promises list\r\n      // promises.push(uploadTask)\r\n\r\n      await uploadTask.on(\r\n        \"state_changed\",\r\n        (snapshot) => {\r\n          console.log(\"Uploading image...\");\r\n        },\r\n        (error) => {\r\n          // Error function ...\r\n          console.log(\"Uploading image error: \", error);\r\n        },\r\n        function () {\r\n          // Complete function ...\r\n          storage\r\n            .ref(`users/${currentUser.email}`)\r\n            .child(`/profile-image/${profileImageFile.name}`)\r\n            .getDownloadURL()\r\n            .then((url) => {\r\n              // Set new data with image URL which is going to be uploaded to Firebase Reatime Database\r\n              let newUserData = { ...userData };\r\n\r\n              // Add new values to object\r\n              newUserData.firstName = newFirstName;\r\n              newUserData.lastName = newLastName;\r\n              newUserData.photoURL = url;\r\n              newUserData.username = newUsername;\r\n              newUserData.nationality = newNationality;\r\n              newUserData.city = newCity;\r\n              newUserData.studyProgram = newStudyProgram;\r\n              newUserData.interests = interests;\r\n\r\n              // Add user data update to promises that will be executed\r\n              promises.push(\r\n                axios.put(`users/${currentUser.uid}.json`, newUserData)\r\n              );\r\n            });\r\n\r\n          console.log(\"Uploaded image\");\r\n        }\r\n      );\r\n    } else {\r\n      // Update user data without updating photoURL field\r\n      console.log(\"Update without image\");\r\n\r\n      // Duplicate userData\r\n      let newUserData = { ...userData };\r\n\r\n      // Add new values to object\r\n      newUserData.firstName = newFirstName;\r\n      newUserData.lastName = newLastName;\r\n      newUserData.username = newUsername;\r\n      newUserData.nationality = newNationality;\r\n      newUserData.city = newCity;\r\n      newUserData.studyProgram = newStudyProgram;\r\n      newUserData.interests = interests;\r\n\r\n      // newUserData.photoURL = profileImageURL;\r\n      // Don't need to add interests because they are added and\r\n      // removed to userData on form change\r\n\r\n      // Validate if any field been changed\r\n      if (objectsAreTheSame(userData, newUserData)) {\r\n        // exit function and don't push to promises list\r\n        console.log(\"Objects are the same \");\r\n      } else {\r\n        // Update other user data\r\n        promises.push(axios.put(`users/${currentUser.uid}.json`, newUserData));\r\n      }\r\n    }\r\n\r\n    // Update email\r\n    // if (emailRef.current.value !== currentUser.email) {\r\n    //   promises.push(updateEmail(emailRef.current.value));\r\n    // }\r\n\r\n    // Update password\r\n    if (passwordRef.current.value) {\r\n      promises.push(updatePassword(passwordRef.current.value));\r\n    }\r\n\r\n    Promise.all(promises)\r\n      .then(() => {\r\n        // Redirect to home page if all promises are successful\r\n        history.push(\"/profile\");\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Update profile error: \", error);\r\n        setError(\"Failed to update profile\");\r\n      })\r\n      .finally(() => {\r\n        setIsLoading(false);\r\n      });\r\n  }\r\n\r\n  // console.log(\"profile image\",profileImagePreview)\r\n\r\n  let accountImageClasses = [\"rounded-circle\", classes.account_image_main];\r\n\r\n  return (\r\n    <div className={classes.form_container}>\r\n      <Card>\r\n        <Card.Body>\r\n          <h2 className=\"text-center mb-4\">Update profile</h2>\r\n\r\n          {error && <Alert variant=\"danger\">{error}</Alert>}\r\n          <div className=\"my-3 text-center\">\r\n            <img\r\n              className={accountImageClasses.join(\" \")}\r\n              src={\r\n                profileImagePreview\r\n                  ? profileImagePreview\r\n                  : userData\r\n                  ? userData.photoURL\r\n                  : account_image\r\n              }\r\n              alt=\"account image\"\r\n            ></img>\r\n            <input\r\n              name=\"image\"\r\n              style={{ display: \"none\" }}\r\n              type=\"file\"\r\n              onChange={uploadNewImage}\r\n              ref={(input) => {\r\n                fileInput = input;\r\n              }}\r\n            />\r\n            <Button\r\n              onClick={() => fileInput.click()}\r\n              className=\"my-4\"\r\n              variant=\"primary\"\r\n            >\r\n              Select new image\r\n            </Button>\r\n          </div>\r\n          <p className=\"text-muted\">\r\n            Leave blank the fields which you don't want to change\r\n          </p>\r\n\r\n          <Form onSubmit={(e) => handleSubmit(e)}>\r\n            <Form.Group id=\"name\">\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                defaultValue={\r\n                  userData && `${userData.firstName} ${userData.lastName}`\r\n                }\r\n                ref={nameRef}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group id=\"username\">\r\n              <Form.Label>Username</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                defaultValue={userData && userData.username}\r\n                ref={usernameRef}\r\n              />\r\n            </Form.Group>\r\n\r\n            {/* <Form.Group id=\"email\">\r\n              <Form.Label>Email</Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                defaultValue={currentUser.email}\r\n                ref={emailRef}\r\n                required\r\n              />\r\n            </Form.Group> */}\r\n\r\n            <Form.Group id=\"nationality\">\r\n              <Form.Label>Nationality</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                defaultValue={userData ? userData.nationality : \"\"}\r\n                ref={nationalityRef}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group id=\"city\">\r\n              <Form.Label>City</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                defaultValue={userData ? userData.city : \"\"}\r\n                ref={cityRef}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group id=\"studyProgram\">\r\n              <Form.Label>Study program</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                defaultValue={userData ? userData.studyProgram : \"\"}\r\n                ref={studyProgramRef}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group id=\"interests\">\r\n              <Form.Label>Interests</Form.Label>\r\n              <InputGroup className=\"mb-3\">\r\n                <FormControl\r\n                  placeholder=\"Add interest\"\r\n                  aria-label=\"interest\"\r\n                  aria-describedby=\"basic-addon2\"\r\n                  ref={interestRef}\r\n                />\r\n                <InputGroup.Append>\r\n                  <Button onClick={(e) => addInterest(e)} variant=\"primary\">\r\n                    Add\r\n                  </Button>\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n              <div className=\"w-100 mx-auto row text-center\">\r\n                {interests && interests !== \"\"\r\n                  ? interests.map((interest, index) => {\r\n                      return (\r\n                        <div\r\n                          key={interest}\r\n                          onClick={(e) => removeInterest(e, index)}\r\n                          className=\"interest-container col-4 px-1\"\r\n                        >\r\n                          <p className=\"interest-box\">{interest}</p>\r\n                        </div>\r\n                      );\r\n                    })\r\n                  : null}\r\n              </div>\r\n            </Form.Group>\r\n\r\n            {/* <Form.Group id=\"interests\">\r\n              <Form.Label>Interests</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n\r\n                // defaultValue={currentUser.email}\r\n              />\r\n              \r\n            </Form.Group> */}\r\n\r\n            <Form.Group id=\"password\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control type=\"password\" ref={passwordRef} />\r\n            </Form.Group>\r\n\r\n            <Form.Group id=\"password-confirm\">\r\n              <Form.Label>Confirm password</Form.Label>\r\n              <Form.Control type=\"password\" ref={passwordConfirmRef} />\r\n            </Form.Group>\r\n\r\n            <Button\r\n              disabled={isLoading}\r\n              className=\"btn-purple-rounded w-100 mb-3\"\r\n              type=\"submit\"\r\n            >\r\n              Update\r\n            </Button>\r\n\r\n            <Link to=\"/profile\" className=\"btn btn-danger w-100 \" type=\"submit\">\r\n              Cancel\r\n            </Link>\r\n          </Form>\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdateProfile;\r\n","D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\shared\\sharedFunctions.js",["92"],"export const objectsAreTheSame = (objectOne, objectTwo) => {\r\n  const objectOneKeys = Object.keys(objectOne);\r\n  const objectTwoKeys = Object.keys(objectTwo);\r\n\r\n  if (objectOneKeys.length !== objectTwoKeys.length) {\r\n    return false;\r\n  }\r\n\r\n  // loop through first object keys\r\n  for (let key of objectOneKeys) {\r\n    console.log(objectOne[key],  objectTwo[key],   objectOne[key] == objectTwo[key])    \r\n\r\n    // Check if field if array (interests) // arrays are objects\r\n    if (typeof(objectOne[key]) == \"object\") {\r\n\r\n      // Check if arrays are the same\r\n      if(JSON.stringify(objectOne[key]) !== JSON.stringify(objectTwo[key])){\r\n        return false\r\n      }\r\n    }\r\n    // Check if object values are the same\r\n    if (objectOne[key] !== objectTwo[key]) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n","D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\Discussions\\Discussions.js",["93"],"D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\Discussions\\Categories.js",[],"D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\Discussions\\DiscussionBox.js",["94"],"D:\\Fontys\\Media design\\DRAM-group\\we-fontys\\src\\components\\Discussions\\DiscussionForm.js",["95","96","97"],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":11,"column":3,"nodeType":"104","messageId":"105","endLine":11,"endColumn":14},{"ruleId":"102","severity":1,"message":"106","line":13,"column":3,"nodeType":"104","messageId":"105","endLine":13,"endColumn":7},{"ruleId":"102","severity":1,"message":"107","line":14,"column":3,"nodeType":"104","messageId":"105","endLine":14,"endColumn":9},{"ruleId":"108","severity":1,"message":"109","line":44,"column":6,"nodeType":"110","endLine":44,"endColumn":8,"suggestions":"111"},{"ruleId":"102","severity":1,"message":"112","line":1,"column":35,"nodeType":"104","messageId":"105","endLine":1,"endColumn":44},{"ruleId":"102","severity":1,"message":"113","line":3,"column":8,"nodeType":"104","messageId":"105","endLine":3,"endColumn":13},{"ruleId":"102","severity":1,"message":"114","line":31,"column":19,"nodeType":"104","messageId":"105","endLine":31,"endColumn":30},{"ruleId":"102","severity":1,"message":"106","line":6,"column":16,"nodeType":"104","messageId":"105","endLine":6,"endColumn":20},{"ruleId":"115","severity":1,"message":"116","line":62,"column":15,"nodeType":"117","endLine":62,"endColumn":112},{"ruleId":"102","severity":1,"message":"118","line":15,"column":3,"nodeType":"104","messageId":"105","endLine":15,"endColumn":10},{"ruleId":"102","severity":1,"message":"119","line":29,"column":10,"nodeType":"104","messageId":"105","endLine":29,"endColumn":25},{"ruleId":"102","severity":1,"message":"120","line":29,"column":27,"nodeType":"104","messageId":"105","endLine":29,"endColumn":45},{"ruleId":"102","severity":1,"message":"121","line":50,"column":24,"nodeType":"104","messageId":"105","endLine":50,"endColumn":35},{"ruleId":"108","severity":1,"message":"122","line":65,"column":6,"nodeType":"110","endLine":65,"endColumn":8,"suggestions":"123"},{"ruleId":"124","severity":1,"message":"125","line":265,"column":13,"nodeType":"117","endLine":275,"endColumn":14},{"ruleId":"126","severity":1,"message":"127","line":11,"column":67,"nodeType":"128","messageId":"129","endLine":11,"endColumn":69},{"ruleId":"108","severity":1,"message":"130","line":34,"column":6,"nodeType":"110","endLine":34,"endColumn":10,"suggestions":"131"},{"ruleId":"102","severity":1,"message":"132","line":3,"column":8,"nodeType":"104","messageId":"105","endLine":3,"endColumn":21},{"ruleId":"108","severity":1,"message":"122","line":31,"column":6,"nodeType":"110","endLine":31,"endColumn":8,"suggestions":"133"},{"ruleId":"134","severity":1,"message":"135","line":41,"column":19,"nodeType":"136","messageId":"137","endLine":41,"endColumn":27,"fix":"138"},{"ruleId":"139","severity":1,"message":"140","line":49,"column":7,"nodeType":"141","messageId":"129","endLine":49,"endColumn":15},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],"no-unused-vars","'FormControl' is defined but never used.","Identifier","unusedVar","'Form' is defined but never used.","'Button' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentUser'. Either include it or remove the dependency array.","ArrayExpression",["144"],"'useEffect' is defined but never used.","'axios' is defined but never used.","'currentUser' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Spinner' is defined but never used.","'profileImageURL' is assigned a value but never used.","'setProfileImageURL' is assigned a value but never used.","'updateEmail' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'currentUser.uid'. Either include it or remove the dependency array.",["145"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has an unnecessary dependency: 'db'. Either exclude it or remove the dependency array. Outer scope values like 'db' aren't valid dependencies because mutating them doesn't re-render the component.",["146"],"'account_image' is defined but never used.",["147"],"new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"148","text":"149"},"no-dupe-keys","Duplicate key 'comments'.","ObjectExpression","no-global-assign","no-unsafe-negation",{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},{"desc":"152","fix":"156"},[1402,1402],"()","Update the dependencies array to be: [currentUser]",{"range":"157","text":"158"},"Update the dependencies array to be: [currentUser.uid]",{"range":"159","text":"160"},"Update the dependencies array to be: []",{"range":"161","text":"162"},{"range":"163","text":"160"},[1036,1038],"[currentUser]",[1899,1901],"[currentUser.uid]",[1019,1023],"[]",[1056,1058]]